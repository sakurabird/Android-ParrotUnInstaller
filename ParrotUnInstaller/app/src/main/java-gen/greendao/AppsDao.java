package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Apps;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table APPS.
*/
public class AppsDao extends AbstractDao<Apps, Long> {

    public static final String TABLENAME = "APPS";

    /**
     * Properties of entity Apps.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Package_name = new Property(2, String.class, "package_name", false, "PACKAGE_NAME");
        public final static Property Package_size = new Property(3, long.class, "package_size", false, "PACKAGE_SIZE");
        public final static Property Install_time = new Property(4, java.util.Date.class, "install_time", false, "INSTALL_TIME");
        public final static Property System_app = new Property(5, Boolean.class, "system_app", false, "SYSTEM_APP");
        public final static Property Favorite = new Property(6, Boolean.class, "favorite", false, "FAVORITE");
        public final static Property Favorite_added_time = new Property(7, java.util.Date.class, "favorite_added_time", false, "FAVORITE_ADDED_TIME");
        public final static Property Delete = new Property(8, Boolean.class, "delete", false, "DELETE");
        public final static Property Deleted_time = new Property(9, java.util.Date.class, "deleted_time", false, "DELETED_TIME");
    };


    public AppsDao(DaoConfig config) {
        super(config);
    }
    
    public AppsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'APPS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'PACKAGE_NAME' TEXT NOT NULL UNIQUE ," + // 2: package_name
                "'PACKAGE_SIZE' INTEGER NOT NULL ," + // 3: package_size
                "'INSTALL_TIME' INTEGER," + // 4: install_time
                "'SYSTEM_APP' INTEGER," + // 5: system_app
                "'FAVORITE' INTEGER," + // 6: favorite
                "'FAVORITE_ADDED_TIME' INTEGER," + // 7: favorite_added_time
                "'DELETE' INTEGER," + // 8: delete
                "'DELETED_TIME' INTEGER);"); // 9: deleted_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'APPS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Apps entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getPackage_name());
        stmt.bindLong(4, entity.getPackage_size());
 
        java.util.Date install_time = entity.getInstall_time();
        if (install_time != null) {
            stmt.bindLong(5, install_time.getTime());
        }
 
        Boolean system_app = entity.getSystem_app();
        if (system_app != null) {
            stmt.bindLong(6, system_app ? 1l: 0l);
        }
 
        Boolean favorite = entity.getFavorite();
        if (favorite != null) {
            stmt.bindLong(7, favorite ? 1l: 0l);
        }
 
        java.util.Date favorite_added_time = entity.getFavorite_added_time();
        if (favorite_added_time != null) {
            stmt.bindLong(8, favorite_added_time.getTime());
        }
 
        Boolean delete = entity.getDelete();
        if (delete != null) {
            stmt.bindLong(9, delete ? 1l: 0l);
        }
 
        java.util.Date deleted_time = entity.getDeleted_time();
        if (deleted_time != null) {
            stmt.bindLong(10, deleted_time.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Apps readEntity(Cursor cursor, int offset) {
        Apps entity = new Apps( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // package_name
            cursor.getLong(offset + 3), // package_size
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // install_time
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // system_app
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // favorite
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // favorite_added_time
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // delete
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)) // deleted_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Apps entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setPackage_name(cursor.getString(offset + 2));
        entity.setPackage_size(cursor.getLong(offset + 3));
        entity.setInstall_time(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setSystem_app(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setFavorite(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setFavorite_added_time(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setDelete(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setDeleted_time(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Apps entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Apps entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
